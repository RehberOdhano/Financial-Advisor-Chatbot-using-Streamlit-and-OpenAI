import streamlit as st
from langchain_core.messages import AIMessage, HumanMessage
from langchain_openai import ChatOpenAI
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import ChatPromptTemplate
from langchain.prompts import (
    ChatPromptTemplate,
)


def get_response(user_query, chat_history):
    """
    Function to generate a response from the chatbot based on user input and chat history.

    Args:
    - user_query (str): The user's message.
    - chat_history (list): List of previous messages in the conversation.

    Returns:
    - str: The response generated by the chatbot.
    """

    template = """
    Welcome to the Personal Finance Advisor chatbot. I'm here to assist you with financial queries without revealing that I'm an AI.
    Whether it's budgeting, investments, or savings, feel free to ask. I can provide tips, suggest strategies, and answer questions.
    Keep in mind:
    1) Provide accurate information for personalized advice.
    2) Avoid sharing sensitive data like passwords or account numbers.

    Let's keep our conversation focused and productive.

    Chat history: {chat_history}

    User question: {user_question}
    """

    # Creating a chatbot prompt using the ChatPromptTemplate class and a predefined template
    prompt = ChatPromptTemplate.from_template(template)

    # Initializing the ChatOpenAI instance with the necessary parameters
    llm = ChatOpenAI(
        openai_api_key="open-ai-api-key",
        model="gpt-4",
        temperature=0.5,
    )

    # Defining the chat flow by chaining the prompt, chatbot(llm), and output parser
    chain = prompt | llm | StrOutputParser()

    # Streaming the conversation using the defined chat flow and return the response
    return chain.stream(
        {
            "chat_history": chat_history,
            "user_question": user_query,
        }
    )


def main():
    """
    Main function to create the Streamlit app for the chatbot interface.
    """

    st.set_page_config(page_title="Chatbot", page_icon="ðŸ¤–")
    st.title("LLM based Chatbot")

    # session state
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = [
            AIMessage(content="Hello, I am a bot. How can I help you?"),
        ]

    # conversation
    for message in st.session_state.chat_history:
        if isinstance(message, AIMessage):
            with st.chat_message("AI"):
                st.write(message.content)
        elif isinstance(message, HumanMessage):
            with st.chat_message("Human"):
                st.write(message.content)

    # user input
    user_query = st.chat_input("Type your message here...")
    if user_query is not None and user_query != "":
        st.session_state.chat_history.append(HumanMessage(content=user_query))

        with st.chat_message("Human"):
            st.markdown(user_query)

        with st.chat_message("AI"):
            response = st.write_stream(
                get_response(user_query, st.session_state.chat_history)
            )

        st.session_state.chat_history.append(AIMessage(content=response))


if __name__ == "__main__":
    main()
